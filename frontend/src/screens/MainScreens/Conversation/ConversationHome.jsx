import React, { useState, useContext } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  LinearGradient,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import { ModalContext } from '../../../context/ModalContext';

const ConversationHome = ({ navigation }) => {
  const { openModal } = useContext(ModalContext);
  const [selectedLevel, setSelectedLevel] = useState('N5');

  const levels = [
    { key: 'N5', label: 'N5', subtitle: 'C∆° b·∫£n', color: '#10B981', gradient: ['#10B981', '#059669'] },
    { key: 'N4', label: 'N4', subtitle: 'S∆° c·∫•p', color: '#3B82F6', gradient: ['#3B82F6', '#2563EB'] },
    { key: 'N3', label: 'N3', subtitle: 'Trung c·∫•p', color: '#F59E0B', gradient: ['#F59E0B', '#D97706'] },
    { key: 'N2', label: 'N2', subtitle: 'Kh√°', color: '#EF4444', gradient: ['#EF4444', '#DC2626'] },
    { key: 'N1', label: 'N1', subtitle: 'Th√†nh th·∫°o', color: '#8B5CF6', gradient: ['#8B5CF6', '#7C3AED'] },
  ];

  const scenarios = [
    {
      key: 'restaurant',
      name: 'Nh√† h√†ng',
      description: 'Luy·ªán h·ªôi tho·∫°i khi ƒëi ƒÉn ·ªü nh√† h√†ng Nh·∫≠t',
      icon: 'restaurant-outline',
      color: '#F97316',
      gradient: ['#F97316', '#EA580C'],
      example: '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ„Åæ„ÅõÔºÅ‰ΩïÂêçÊßò„Åß„Åô„ÅãÔºü',
      difficulty: 'D·ªÖ'
    },
    {
      key: 'shopping',
      name: 'Mua s·∫Øm',
      description: 'Th·ª±c h√†nh mua s·∫Øm t·∫°i c·ª≠a h√†ng',
      icon: 'bag-outline',
      color: '#EC4899',
      gradient: ['#EC4899', '#DB2777'],
      example: '„Åì„Çå„ÅØ„ÅÑ„Åè„Çâ„Åß„Åô„ÅãÔºü',
      difficulty: 'D·ªÖ'
    },
    {
      key: 'station',
      name: 'Ga t√†u',
      description: 'H·ªèi ƒë∆∞·ªùng v√† di chuy·ªÉn b·∫±ng t√†u ƒëi·ªán',
      icon: 'train-outline',
      color: '#06B6D4',
      gradient: ['#06B6D4', '#0891B2'],
      example: 'Ê∏ãË∞∑„Åæ„Åß„ÅÑ„Åè„Çâ„Åß„Åô„ÅãÔºü',
      difficulty: 'Trung b√¨nh'
    },
    {
      key: 'hotel',
      name: 'Kh√°ch s·∫°n',
      description: 'Check-in v√† c√°c d·ªãch v·ª• kh√°ch s·∫°n',
      icon: 'bed-outline',
      color: '#8B5CF6',
      gradient: ['#8B5CF6', '#7C3AED'],
      example: '„ÉÅ„Çß„ÉÉ„ÇØ„Ç§„É≥„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ',
      difficulty: 'Trung b√¨nh'
    },
    {
      key: 'doctor',
      name: 'B·ªánh vi·ªán',
      description: 'Kh√°m b·ªánh v√† m√¥ t·∫£ tri·ªáu ch·ª©ng',
      icon: 'medical-outline',
      color: '#EF4444',
      gradient: ['#EF4444', '#DC2626'],
      example: 'È†≠„ÅåÁóõ„ÅÑ„Åß„Åô„ÄÇ',
      difficulty: 'Kh√≥'
    },
    {
      key: 'school',
      name: 'Tr∆∞·ªùng h·ªçc',
      description: 'H·ªôi tho·∫°i v·ªõi gi√°o vi√™n v√† b·∫°n h·ªçc',
      icon: 'school-outline',
      color: '#10B981',
      gradient: ['#10B981', '#059669'],
      example: 'ÂÆøÈ°å„ÇíÂøò„Çå„Åæ„Åó„Åü„ÄÇ',
      difficulty: 'D·ªÖ'
    },
    {
      key: 'friend',
      name: 'B·∫°n b√®',
      description: 'Tr√≤ chuy·ªán th√¢n m·∫≠t v·ªõi b·∫°n Nh·∫≠t',
      icon: 'people-outline',
      color: '#F59E0B',
      gradient: ['#F59E0B', '#D97706'],
      example: '‰ªäÂ∫¶„ÄÅÊò†Áîª„ÇíË¶ã„Å´Ë°å„Åç„Åæ„Åõ„Çì„ÅãÔºü',
      difficulty: 'D·ªÖ'
    },
    {
      key: 'interview',
      name: 'Ph·ªèng v·∫•n',
      description: 'Ph·ªèng v·∫•n xin vi·ªác t·∫°i c√¥ng ty Nh·∫≠t',
      icon: 'briefcase-outline',
      color: '#6366F1',
      gradient: ['#6366F1', '#4F46E5'],
      example: 'Ëá™Â∑±Á¥π‰ªã„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ',
      difficulty: 'Kh√≥'
    },
  ];

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'D·ªÖ': return '#10B981';
      case 'Trung b√¨nh': return '#F59E0B';
      case 'Kh√≥': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const renderScenarioCard = (scenario, index) => (
    <TouchableOpacity
      key={scenario.key}
      className="bg-white rounded-2xl shadow-sm mb-6 overflow-hidden border border-gray-100"
      style={{
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 3,
      }}
      onPress={() => {
        navigation.navigate('ConversationChat', {
          scenario: scenario.key,
          scenarioName: scenario.name,
          level: selectedLevel
        });
      }}
      activeOpacity={0.9}
    >
      {/* Gradient Header */}
      <View 
        className="h-2 w-full"
        style={{
          backgroundColor: scenario.color
        }}
      />
      
      <View className="p-5">
        <View className="flex-row items-start">
          {/* Icon Container */}
          <View
            className="w-14 h-14 rounded-xl items-center justify-center mr-4"
            style={{ 
              backgroundColor: `${scenario.color}10`,
              borderWidth: 1,
              borderColor: `${scenario.color}20`
            }}
          >
            <Icon name={scenario.icon} size={24} color={scenario.color} />
          </View>
          
          <View className="flex-1">
            {/* Title and Difficulty */}
            <View className="flex-row items-center justify-between mb-2">
              <Text className="text-lg font-bold text-gray-800">
                {scenario.name}
              </Text>
              <View 
                className="px-2 py-1 rounded-lg"
                style={{ backgroundColor: `${getDifficultyColor(scenario.difficulty)}15` }}
              >
                <Text 
                  className="text-xs font-medium"
                  style={{ color: getDifficultyColor(scenario.difficulty) }}
                >
                  {scenario.difficulty}
                </Text>
              </View>
            </View>
            
            {/* Description */}
            <Text className="text-gray-600 mb-3 text-sm leading-5">
              {scenario.description}
            </Text>
            
            {/* Example Section */}
            <View className="bg-gray-50 rounded-lg p-3 border-l-3" style={{ borderLeftColor: scenario.color }}>
              <View className="flex-row items-center mb-1">
                <Icon name="chatbubble-ellipses-outline" size={14} color="#6B7280" />
                <Text className="text-xs font-medium text-gray-500 ml-2">V√ç D·ª§ C√ÇU H·ªéI</Text>
              </View>
              <Text className="text-sm font-medium text-gray-800">
                {scenario.example}
              </Text>
            </View>
          </View>
        </View>
        
        {/* Action Button */}
        <TouchableOpacity
          className="flex-row items-center justify-center mt-4 py-3 rounded-xl"
          style={{ backgroundColor: `${scenario.color}08` }}
          onPress={() => {
            navigation.navigate('ConversationChat', {
              scenario: scenario.key,
              scenarioName: scenario.name,
              level: selectedLevel
            });
          }}
        >
          <Icon name="play-circle-outline" size={18} color={scenario.color} />
          <Text className="font-semibold ml-2 text-sm" style={{ color: scenario.color }}>
            B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p
          </Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View className="flex-1 bg-gradient-to-b from-pink-50 to-white">
      <View className="bg-white shadow-lg border-b border-gray-100">

        <View className="p-6 pb-4">
          <Text className="text-lg font-bold text-gray-800 mb-4">
            Ch·ªçn c·∫•p ƒë·ªô c·ªßa b·∫°n
          </Text>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={{ paddingHorizontal: 4 }}
          >
            <View className="flex-row space-x-3 gap-3">
              {levels.map((level) => (
                <TouchableOpacity
                  key={level.key}
                  className={`px-5 py-3 rounded-xl border min-w-20 items-center ${
                    selectedLevel === level.key
                      ? 'border-pink-300 bg-pink-50'
                      : 'border-gray-200 bg-white'
                  }`}
                  onPress={() => setSelectedLevel(level.key)}
                  activeOpacity={0.8}
                >
                  <Text
                    className={`text-base font-bold ${
                      selectedLevel === level.key
                        ? 'text-pink-600'
                        : 'text-gray-700'
                    }`}
                  >
                    {level.label}
                  </Text>
                  <Text
                    className={`text-xs font-medium mt-1 ${
                      selectedLevel === level.key
                        ? 'text-pink-500'
                        : 'text-gray-500'
                    }`}
                  >
                    {level.subtitle}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </ScrollView>
        </View>
      </View>

      {/* Scenarios List */}
      <ScrollView className="flex-1 px-6 pt-6" showsVerticalScrollIndicator={false}>
        <View className="mb-6">
          <Text className="text-2xl font-bold text-gray-800 mb-2">
            üé≠ T√¨nh hu·ªëng th·ª±c t·∫ø
          </Text>
          <Text className="text-gray-600 leading-6">
            AI s·∫Ω ch·ªâ n√≥i ti·∫øng Nh·∫≠t thu·∫ßn t√∫y. H√£y c·ªë g·∫Øng hi·ªÉu v√† tr·∫£ l·ªùi b·∫±ng ti·∫øng Nh·∫≠t!
          </Text>
        </View>

        {scenarios.map((scenario, index) => renderScenarioCard(scenario, index))}

        {/* Enhanced Tips */}
        <View className="bg-blue-50 border border-blue-100 rounded-xl p-5 mb-8">
          <View className="flex-row items-center mb-3">
            <View className="w-8 h-8 bg-blue-500 rounded-lg items-center justify-center">
              <Icon name="bulb" size={16} color="#fff" />
            </View>
            <Text className="text-lg font-bold text-blue-800 ml-3">
              üí° M·∫πo luy·ªán t·∫≠p
            </Text>
          </View>
          <View className="space-y-2">
            {[
              'ƒê·ª´ng lo l·∫Øng v·ªÅ l·ªói ng·ªØ ph√°p, h√£y t·∫≠p trung v√†o giao ti·∫øp',
              'S·ª≠ d·ª•ng t·ª´ v·ª±ng ƒë∆°n gi·∫£n n·∫øu ch∆∞a bi·∫øt t·ª´ ph·ª©c t·∫°p',
              'AI s·∫Ω ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥ ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô c·ªßa b·∫°n',
              'H√£y th·ª≠ n√≥i nhi·ªÅu c√¢u ƒë·ªÉ ƒë∆∞·ª£c ƒë√°nh gi√° t·ªët h∆°n'
            ].map((tip, index) => (
              <View key={index} className="flex-row items-start">
                <View className="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 mr-3" />
                <Text className="text-blue-700 text-sm leading-5 flex-1">
                  {tip}
                </Text>
              </View>
            ))}
          </View>
        </View>
      </ScrollView>
    </View>
  );
};

export default ConversationHome; 