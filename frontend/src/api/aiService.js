import apiClient from './config';

const aiService = {
    // Gi·∫£i th√≠ch t·ª´ v·ª±ng
    explainVocabulary: async (word, level = 'N5') => {
        try {
            const requestData = { word, level };
            console.log('üöÄ G·ªçi API explainVocabulary:', requestData);
            
            const response = await apiClient.post('/chat/explain-vocabulary', requestData);
            console.log('‚úÖ Response explainVocabulary:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi g·ªçi API gi·∫£i th√≠ch t·ª´ v·ª±ng:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    // Gi·∫£i th√≠ch ng·ªØ ph√°p
    explainGrammar: async (rule, level = 'N5') => {
        try {
            const requestData = { grammar: rule, level };
            console.log('üöÄ G·ªçi API explainGrammar:', requestData);
            
            const response = await apiClient.post('/chat/explain-grammar', requestData);
            console.log('‚úÖ Response explainGrammar:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi g·ªçi API gi·∫£i th√≠ch ng·ªØ ph√°p:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    // T·∫°o v√≠ d·ª• cho t·ª´ v·ª±ng
    generateExamples: async (word, level = 'N5') => {
        try {
            const requestData = { word, level };
            console.log('üöÄ G·ªçi API generateExamples:', requestData);
            
            const response = await apiClient.post('/chat/generate-examples', requestData);
            console.log('‚úÖ Response generateExamples:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o v√≠ d·ª•:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    // H·ªèi c√¢u h·ªèi AI
    askQuestion: async (question, context = '') => {
        try {
            const requestData = { question, context };
            console.log('üöÄ G·ªçi API askQuestion:', requestData);
            
            const response = await apiClient.post('/chat/ask-question', requestData);
            console.log('‚úÖ Response askQuestion:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi h·ªèi AI:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    // Gi·∫£i th√≠ch ƒë√°p √°n c√¢u h·ªèi JLPT
    explainAnswer: async (questionData) => {
        try {
            const requestData = {
                questionText: questionData.questionText,
                options: questionData.options,
                correctAnswer: questionData.correctAnswer,
                userAnswer: questionData.userAnswer || null,
                questionType: questionData.type || questionData.section,
                level: questionData.level,
                section: questionData.section
            };
            console.log('üöÄ G·ªçi API explainAnswer:', requestData);
            
            const response = await apiClient.post('/chat/explain-answer', requestData);
            console.log('‚úÖ Response explainAnswer:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi gi·∫£i th√≠ch ƒë√°p √°n:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    // APIs cho conversation practice
    startConversation: async (scenario, level, sessionId) => {
        try {
            const requestData = { scenario, level, sessionId };
            console.log('üöÄ G·ªçi API startConversation:', requestData);
            
            const response = await apiClient.post('/chat/start-conversation', requestData);
            console.log('‚úÖ Response startConversation:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi b·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    continueConversation: async (sessionId, userMessage, conversationHistory, scenario, level) => {
        try {
            const requestData = { sessionId, userMessage, conversationHistory, scenario, level };
            console.log('üöÄ G·ªçi API continueConversation:', requestData);
            
            const response = await apiClient.post('/chat/continue-conversation', requestData);
            console.log('‚úÖ Response continueConversation:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi ti·∫øp t·ª•c cu·ªôc h·ªôi tho·∫°i:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    },

    endConversation: async (sessionId, conversationHistory, scenario, level) => {
        try {
            const requestData = { sessionId, conversationHistory, scenario, level };
            console.log('üöÄ G·ªçi API endConversation:', requestData);
            
            const response = await apiClient.post('/chat/end-conversation', requestData);
            console.log('‚úÖ Response endConversation:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi k·∫øt th√∫c cu·ªôc h·ªôi tho·∫°i:', error);
            console.error('‚ùå Error response:', error.response?.data);
            console.error('‚ùå Error status:', error.response?.status);
            throw error;
        }
    }
};

export default aiService; 