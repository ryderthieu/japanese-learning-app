import React, { useEffect } from 'react';
import { View, Text, Modal, TouchableOpacity, Dimensions, ScrollView, ActivityIndicator, StyleSheet } from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import { useAIExplanation } from '../../context/AIExplanationContext';
import aiService from '../../api/aiService';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// const explain = `1. √ù nghƒ©a v√† c√°ch s·ª≠ d·ª•ng:
// \"ƒê·ªông t·ª´ th·ªÉ t·ª´ ƒëi·ªÉn + Èñì„Å´\" ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ di·ªÖn ƒë·∫°t h√†nh ƒë·ªông x·∫£y ra trong kho·∫£ng th·ªùi gian gi·ªØa hai s·ª± ki·ªán ho·∫∑c th·ªùi ƒëi·ªÉm c·ª• th·ªÉ. Ng·ªØ ph√°p n√†y th∆∞·ªùng ƒë∆∞·ª£c d√πng ƒë·ªÉ ch·ªâ ra th·ªùi gian ho·∫∑c kho·∫£ng th·ªùi gian m√† h√†nh ƒë·ªông x·∫£y ra.

// 2. C·∫•u tr√∫c ng·ªØ ph√°p:
// [ƒê·ªông t·ª´ th·ªÉ t·ª´ ƒëi·ªÉn] + Èñì„Å´

// 3. V√≠ d·ª• minh h·ªça:
// - Êòº„ÅîÈ£Ø„ÇíÈ£ü„Åπ„Å¶„ÅÑ„ÇãÈñì„Å´„ÄÅÂèãÈÅî„Åã„ÇâÈõªË©±„Åå„Åã„Åã„Å£„Å¶„Åç„Åü„ÄÇ
// (Khi ƒëang ƒÉn tr∆∞a, b·∫°n b√® g·ªçi ƒëi·ªán tho·∫°i.)
// - Êó•Êú¨„Å´ÁïôÂ≠¶„Åó„Å¶„ÅÑ„ÇãÈñì„Å´„ÄÅÊó•Êú¨Ë™û„Åå‰∏äÈÅî„Åó„Åæ„Åó„Åü„ÄÇ
// (Trong th·ªùi gian du h·ªçc ·ªü Nh·∫≠t, ti·∫øng Nh·∫≠t c·ªßa t√¥i ƒë√£ ti·∫øn tri·ªÉn.)
// - Êò†Áîª„ÇíË¶ã„Å¶„ÅÑ„ÇãÈñì„Å´„ÄÅÁú†„Å£„Å¶„Åó„Åæ„Å£„Åü„ÄÇ
// (Trong l√∫c ƒëang xem phim, t√¥i ƒë√£ ng·ªß g·ª•c.)

// 4. L∆∞u √Ω v·ªÅ c√°ch s·ª≠ d·ª•ng:
// Ng·ªØ ph√°p n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c·∫£ vƒÉn vi·∫øt v√† vƒÉn n√≥i. N√≥ mang t√≠nh ch·∫•t ch√≠nh x√°c v·ªÅ th·ªùi gian v√† th∆∞·ªùng d√πng trong c√°c t√¨nh hu·ªëng m√¥ t·∫£ h√†nh ƒë·ªông x·∫£y ra trong m·ªôt kho·∫£ng th·ªùi gian c·ª• th·ªÉ.

// 5. Ng·ªØ ph√°p t∆∞∆°ng t·ª± ho·∫∑c c·∫ßn ph√¢n bi·ªát:
// M·ªôt ng·ªØ ph√°p t∆∞∆°ng t·ª± l√† \"Èñì„Çí„Åä„ÅÑ„Å¶\", ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ m√¥ t·∫£ vi·ªác c√≥ m·ªôt kho·∫£ng th·ªùi gian gi·ªØa hai h√†nh ƒë·ªông ho·∫∑c s·ª± ki·ªán. Tuy nhi√™n, \"Èñì„Å´\" th∆∞·ªùng ch·ªâ ra th·ªùi gian h√†nh ƒë·ªông x·∫£y ra, trong khi \"Èñì„Çí„Åä„ÅÑ„Å¶\" th∆∞·ªùng ch·ªâ ra s·ª± ch√™nh l·ªách th·ªùi gian gi·ªØa hai h√†nh ƒë·ªông.`
export const AIExplanationModal = () => {
    const { 
        isModalVisible, 
        isLoading, 
        explanation, 
        currentItem, 
        explanationType,
        hideExplanation,
        setIsLoading,
        setExplanation
    } = useAIExplanation();

    console.log('üîÑ AIExplanationModal render:', { isModalVisible, currentItem, explanationType });

    useEffect(() => {
        if (isModalVisible && currentItem && explanationType) {
            fetchExplanation();
        }
    }, [isModalVisible, currentItem, explanationType]);

    const fetchExplanation = async () => {
        if (!currentItem) return;

        setIsLoading(true);
        setExplanation('');
        try {
            let result;
            
            if (explanationType === 'vocabulary') {
                const word = currentItem.kanji || currentItem.word;
                result = await aiService.explainVocabulary(word, currentItem.level || 'N5');
            } else if (explanationType === 'grammar') {
                result = await aiService.explainGrammar(currentItem.rule, currentItem.level || 'N5');
            } else if (explanationType === 'question') {
                // S·ª≠ d·ª•ng explainAnswer ƒë·ªÉ gi·∫£i th√≠ch c√¢u h·ªèi JLPT m·ªôt c√°ch chuy√™n nghi·ªáp
                const correctOption = currentItem.options?.find(opt => opt.isCorrect);
                
                const questionData = {
                    questionText: currentItem.questionText,
                    options: currentItem.options,
                    correctAnswer: correctOption?.text || 'Kh√¥ng x√°c ƒë·ªãnh',
                    userAnswer: null, // C√≥ th·ªÉ th√™m sau n·∫øu c·∫ßn
                    type: currentItem.section || currentItem.type,
                    level: currentItem.level || 'N5',
                    section: currentItem.section || currentItem.type
                };
                
                result = await aiService.explainAnswer(questionData);
            }

            if (result?.success) {
                setExplanation(result.data?.explanation || result.data?.answer || 'Kh√¥ng c√≥ gi·∫£i th√≠ch chi ti·∫øt.');
            } else {
                setExplanation('C√≥ l·ªói x·∫£y ra khi l·∫•y gi·∫£i th√≠ch. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        } catch (error) {
            setExplanation('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
        } finally {
            setIsLoading(false);
        }
    };

    const getItemTitle = () => {
        if (!currentItem) return '';
        
        if (explanationType === 'vocabulary') {
            return currentItem.kanji || currentItem.word || 'T·ª´ v·ª±ng';
        } else if (explanationType === 'grammar') {
            return currentItem.rule || 'Ng·ªØ ph√°p';
        } else if (explanationType === 'question') {
            return `C√¢u h·ªèi ${currentItem.questionNumber || ''}`;
        }
        return '';
    };

    const getItemSubtitle = () => {
        if (!currentItem) return '';
        
        if (explanationType === 'vocabulary') {
            return currentItem.meaning || '';
        } else if (explanationType === 'grammar') {
            return currentItem.meaning || '';
        } else if (explanationType === 'question') {
            const sectionNames = {
                'moji_goi': 'ÊñáÂ≠ó„ÉªË™ûÂΩô (T·ª´ v·ª±ng)',
                'bunpou': 'ÊñáÊ≥ï (Ng·ªØ ph√°p)', 
                'dokkai': 'Ë™≠Ëß£ (ƒê·ªçc hi·ªÉu)',
                'choukai': 'ËÅ¥Ëß£ (Nghe hi·ªÉu)'
            };
            return sectionNames[currentItem.section || currentItem.type] || 'C√¢u h·ªèi JLPT';
        }
        return '';
    };

    const getSectionName = (section) => {
        const sectionNames = {
            'moji_goi': 'ÊñáÂ≠ó„ÉªË™ûÂΩô (T·ª´ v·ª±ng)',
            'bunpou': 'ÊñáÊ≥ï (Ng·ªØ ph√°p)', 
            'dokkai': 'Ë™≠Ëß£ (ƒê·ªçc hi·ªÉu)',
            'choukai': 'ËÅ¥Ëß£ (Nghe hi·ªÉu)'
        };
        return sectionNames[section] || 'C√¢u h·ªèi JLPT';
    };

    const formatExplanation = (text) => {
        if (!text) return '';
        
        // T√°ch c√°c ph·∫ßn theo s·ªë th·ª© t·ª±
        const sections = text.split(/(\d+\.\s)/).filter(Boolean);
        const formattedSections = [];
        
        for (let i = 0; i < sections.length; i += 2) {
            if (sections[i] && sections[i + 1]) {
                const number = sections[i];
                const content = sections[i + 1];
                formattedSections.push({ number, content });
            }
        }
        
        return formattedSections.length > 0 ? formattedSections : [{ number: '', content: text }];
    };

    const formatVocabularyExplanation = (text) => {
        if (!text) return [];
        
        const lines = text.split('\n').filter(line => line.trim());
        const sections = [];
        let currentSection = null;
        
        lines.forEach((line, index) => {
            const trimmedLine = line.trim();
            
            if (trimmedLine.match(/^\d+\./)) {
                // D√≤ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë (1., 2., 3., ...)
                const match = trimmedLine.match(/^(\d+\.\s*)(.+)$/);
                if (match) {
                    const number = match[1];
                    const content = match[2];
                    
                    // L∆∞u section tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
                    if (currentSection) {
                        sections.push(currentSection);
                    }
                    
                    // T·∫°o section m·ªõi
                    currentSection = {
                        number: number.trim(),
                        content: content,
                        type: 'main'
                    };
                }
            } else if (trimmedLine.startsWith('-') && currentSection) {
                // V√≠ d·ª• thu·ªôc v·ªÅ section hi·ªán t·∫°i
                const exampleContent = trimmedLine.substring(1).trim();
                
                // N·∫øu l√† section "V√≠ d·ª• c√¢u s·ª≠ d·ª•ng" (section s·ªë 3)
                if (currentSection.number === '3.') {
                    // X·ª≠ l√Ω format ƒë·∫∑c bi·ªát cho v√≠ d·ª•
                    const nextLine = lines[index + 1]?.trim();
                    const lineAfterNext = lines[index + 2]?.trim();
                    
                    // Ki·ªÉm tra n·∫øu c√≥ ƒë·ªß 3 d√≤ng: c√¢u Nh·∫≠t, romaji, nghƒ©a
                    if (nextLine && lineAfterNext && 
                        nextLine.startsWith('-') && 
                        lineAfterNext.startsWith('-')) {
                        
                        const japaneseSentence = exampleContent;
                        const romaji = nextLine.substring(1).trim();
                        const vietnamese = lineAfterNext.substring(1).trim();
                        
                        // Format: C√¢u Nh·∫≠t (Romaji)\nNghƒ©a ti·∫øng Vi·ªát
                        const formattedExample = `${japaneseSentence} (${romaji})\n${vietnamese}`;
                        
                        if (currentSection.content === currentSection.content.match(/^.+$/)?.[0]) {
                            // N·∫øu ch∆∞a c√≥ v√≠ d·ª• n√†o, thay th·∫ø content
                            currentSection.content = formattedExample;
                        } else {
                            // N·∫øu ƒë√£ c√≥ v√≠ d·ª•, th√™m v·ªõi kho·∫£ng c√°ch
                            currentSection.content += '\n\n' + formattedExample;
                        }
                        
                        // B·ªè qua 2 d√≤ng ti·∫øp theo v√¨ ƒë√£ x·ª≠ l√Ω
                        lines.splice(index + 1, 2);
                    }
                } else {
                    // C√°c section kh√°c th√¨ n·ªëi b√¨nh th∆∞·ªùng
                    currentSection.content += '\n‚Ä¢ ' + exampleContent;
                }
            } else if (trimmedLine && !trimmedLine.match(/^\d+\./) && currentSection && !trimmedLine.startsWith('-')) {
                // N·ªôi dung b·ªï sung - n·ªëi v√†o section hi·ªán t·∫°i (ch·ªâ khi kh√¥ng ph·∫£i d·∫•u -)
                currentSection.content += '\n' + trimmedLine;
            }
        });
        
        // Th√™m section cu·ªëi c√πng
        if (currentSection) {
            sections.push(currentSection);
        }
        
        return sections;
    };

    const highlightKanjiWithHanViet = (text) => {
        // Regex ƒë·ªÉ t√¨m pattern: Kanji (PHI√äN_√ÇM_H√ÅN_VI·ªÜT)
        const kanjiPattern = /([‰∏Ä-ÈæØ]+)\s*\(([A-Z√Å√Ä·∫†·∫¢√ÉƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√Ç·∫¶·∫§·∫¨·∫®·∫™ƒê√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏\s]+)\)/g;
        
        return text.replace(kanjiPattern, (match, kanji, hanviet) => {
            return `<span style="font-weight: bold; color: #FF4081;">${kanji}</span> <span style="color: #3B82F6; font-size: 0.9em;">(${hanviet})</span>`;
        });
    };

    const parseTextWithKanji = (text) => {
        // T√°ch text th√†nh c√°c ph·∫ßn: text th∆∞·ªùng, Kanji, v√† H√°n Vi·ªát
        const kanjiPattern = /([‰∏Ä-ÈæØ]+)\s*\(([A-Z√Å√Ä·∫†·∫¢√ÉƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√Ç·∫¶·∫§·∫¨·∫®·∫™ƒê√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏\s]+)\)/g;
        const parts = [];
        let lastIndex = 0;
        
        let match;
        while ((match = kanjiPattern.exec(text)) !== null) {
            // Th√™m text tr∆∞·ªõc match
            if (match.index > lastIndex) {
                parts.push({
                    type: 'text',
                    content: text.substring(lastIndex, match.index)
                });
            }
            
            // Th√™m Kanji
            parts.push({
                type: 'kanji',
                content: match[1]
            });
            
            // Th√™m H√°n Vi·ªát
            parts.push({
                type: 'hanviet',
                content: `(${match[2]})`
            });
            
            lastIndex = match.index + match[0].length;
        }
        
        // Th√™m ph·∫ßn c√≤n l·∫°i
        if (lastIndex < text.length) {
            parts.push({
                type: 'text',
                content: text.substring(lastIndex)
            });
        }
        
        return parts;
    };

    const RichText = ({ children, style }) => {
        const textParts = parseTextWithKanji(children);
        
        return (
            <Text style={style}>
                {textParts.map((part, index) => {
                    if (part.type === 'kanji') {
                        return (
                            <Text key={index} style={{ fontWeight: 'bold', color: '#F472B6' }}>
                                {part.content}
                            </Text>
                        );
                    } else if (part.type === 'hanviet') {
                        return (
                            <Text key={index} style={{ color: '#3B82F6', fontSize: 13 }}>
                                {part.content}
                            </Text>
                        );
                    } else {
                        return part.content;
                    }
                })}
            </Text>
        );
    };

    const formatGrammarExplanation = (text) => {
        if (!text) return [];
        
        const lines = text.split('\n').filter(line => line.trim());
        const sections = [];
        let currentSection = null;
        
        lines.forEach((line, index) => {
            const trimmedLine = line.trim();
            
            if (trimmedLine.match(/^\d+\./)) {
                // D√≤ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë (1., 2., 3., ...)
                const match = trimmedLine.match(/^(\d+\.\s*)(.+)$/);
                if (match) {
                    const number = match[1];
                    const content = match[2];
                    
                    // L∆∞u section tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
                    if (currentSection) {
                        sections.push(currentSection);
                    }
                    
                    // T·∫°o section m·ªõi
                    currentSection = {
                        number: number.trim(),
                        content: content,
                        type: 'main'
                    };
                }
            } else if (trimmedLine.startsWith('-') && currentSection) {
                // V√≠ d·ª• thu·ªôc v·ªÅ section hi·ªán t·∫°i
                const exampleContent = trimmedLine.substring(1).trim();
                
                // N·∫øu l√† section "V√≠ d·ª• minh h·ªça" (section s·ªë 3)
                if (currentSection.number === '3.') {
                    // X·ª≠ l√Ω format ƒë·∫∑c bi·ªát cho v√≠ d·ª• ng·ªØ ph√°p
                    const nextLine = lines[index + 1]?.trim();
                    
                    // Ki·ªÉm tra n·∫øu d√≤ng ti·∫øp theo kh√¥ng ph·∫£i l√† v√≠ d·ª• (kh√¥ng c√≥ d·∫•u -)
                    if (nextLine && !nextLine.startsWith('-')) {
                        // Format: C√¢u Nh·∫≠t\nNghƒ©a ti·∫øng Vi·ªát
                        const formattedExample = `${exampleContent}\n${nextLine}`;
                        
                        if (currentSection.content === currentSection.content.match(/^.+$/)?.[0]) {
                            // N·∫øu ch∆∞a c√≥ v√≠ d·ª• n√†o, thay th·∫ø content
                            currentSection.content = formattedExample;
                        } else {
                            // N·∫øu ƒë√£ c√≥ v√≠ d·ª•, th√™m v·ªõi kho·∫£ng c√°ch
                            currentSection.content += '\n\n' + formattedExample;
                        }
                        
                        // B·ªè qua d√≤ng ti·∫øp theo v√¨ ƒë√£ x·ª≠ l√Ω
                        lines.splice(index + 1, 1);
                    } else {
                        // N·∫øu kh√¥ng c√≥ nghƒ©a ·ªü d√≤ng ti·∫øp theo, ch·ªâ th√™m c√¢u v√≠ d·ª•
                        if (currentSection.content === currentSection.content.match(/^.+$/)?.[0]) {
                            currentSection.content = exampleContent;
                        } else {
                            currentSection.content += '\n\n' + exampleContent;
                        }
                    }
                } else {
                    // C√°c section kh√°c th√¨ n·ªëi b√¨nh th∆∞·ªùng
                    currentSection.content += '\n‚Ä¢ ' + exampleContent;
                }
            } else if (trimmedLine && !trimmedLine.match(/^\d+\./) && currentSection && !trimmedLine.startsWith('-')) {
                // N·ªôi dung b·ªï sung - n·ªëi v√†o section hi·ªán t·∫°i (ch·ªâ khi kh√¥ng ph·∫£i d·∫•u -)
                currentSection.content += '\n' + trimmedLine;
            }
        });
        
        // Th√™m section cu·ªëi c√πng
        if (currentSection) {
            sections.push(currentSection);
        }
        
        return sections;
    };

    const getGrammarSectionTitle = (number) => {
        const sectionTitles = {
            '1.': '√ù nghƒ©a v√† c√°ch s·ª≠ d·ª•ng',
            '2.': 'C·∫•u tr√∫c ng·ªØ ph√°p', 
            '3.': 'V√≠ d·ª• minh h·ªça',
            '4.': 'L∆∞u √Ω v·ªÅ c√°ch s·ª≠ d·ª•ng',
            '5.': 'Ng·ªØ ph√°p t∆∞∆°ng t·ª± ho·∫∑c c·∫ßn ph√¢n bi·ªát'
        };
        return sectionTitles[number] || 'N·ªôi dung';
    };

    const formatQuestionExplanation = (text) => {
        if (!text) return [];
        
        const lines = text.split('\n').filter(line => line.trim());
        const sections = [];
        let currentSection = null;
        
        lines.forEach((line, index) => {
            const trimmedLine = line.trim();
            
            // T√¨m section header v·ªõi format: 1. **Title** ho·∫∑c **s·ªë. Title**
            const headerMatch = trimmedLine.match(/^(\d+\.|\*\*\d+\.)\s*\*\*(.*?)\*\*/) || 
                               trimmedLine.match(/^(\d+\.)\s*(.+)$/);
            
            if (headerMatch) {
                // L∆∞u section tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
                if (currentSection) {
                    sections.push(currentSection);
                }
                
                const number = headerMatch[1].replace(/\*/g, '').trim();
                const title = headerMatch[2] || headerMatch[1];
                
                // T·∫°o section m·ªõi
                currentSection = {
                    number: number,
                    title: title.replace(/\*/g, '').trim(),
                    content: '',
                    type: 'main'
                };
            } else if (trimmedLine.startsWith('-') && currentSection) {
                // Bullet point thu·ªôc v·ªÅ section hi·ªán t·∫°i
                const bulletContent = trimmedLine.substring(1).trim();
                if (currentSection.content) {
                    currentSection.content += '\n‚Ä¢ ' + bulletContent;
                } else {
                    currentSection.content = '‚Ä¢ ' + bulletContent;
                }
            } else if (trimmedLine && !trimmedLine.match(/^\*\*/) && currentSection) {
                // N·ªôi dung b·ªï sung - n·ªëi v√†o section hi·ªán t·∫°i
                if (currentSection.content) {
                    currentSection.content += '\n' + trimmedLine;
                } else {
                    currentSection.content = trimmedLine;
                }
            }
        });
        
        // Th√™m section cu·ªëi c√πng
        if (currentSection) {
            sections.push(currentSection);
        }
        
        return sections;
    };

    const getQuestionSectionTitle = (number, originalTitle) => {
        // N·∫øu c√≥ title g·ªëc t·ª´ AI, s·ª≠ d·ª•ng n√≥
        if (originalTitle) {
            return originalTitle;
        }
        
        // Fallback titles
        const sectionTitles = {
            '1.': 'Ph√¢n t√≠ch c√¢u h·ªèi',
            '2.': 'Gi·∫£i th√≠ch t·ª´ng l·ª±a ch·ªçn', 
            '3.': 'T·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng?',
            '4.': 'Ki·∫øn th·ª©c c·∫ßn nh·ªõ',
            '5.': 'M·∫πo l√†m b√†i'
        };
        return sectionTitles[number] || 'N·ªôi dung';
    };

    const renderContent = () => {
        if (isLoading) {
            return (
                <View style={{
                    alignItems: 'center',
                    paddingVertical: 60
                }}>
                    <ActivityIndicator size="large" color="#F472B6" />
                    <Text style={{
                        color: '#6B7280',
                        marginTop: 20,
                        textAlign: 'center',
                        fontSize: 16
                    }}>
                        AI ƒëang ph√¢n t√≠ch v√† t·∫°o gi·∫£i th√≠ch chi ti·∫øt...
                    </Text>
                </View>
            );
        }

        if (!explanation) {
            return (
                <View style={{
                    alignItems: 'center',
                    paddingVertical: 60
                }}>
                    <Icon name="help-circle-outline" size={64} color="#9CA3AF" />
                    <Text style={{
                        color: '#6B7280',
                        marginTop: 20,
                        textAlign: 'center',
                        fontSize: 16
                    }}>
                        Ch∆∞a c√≥ gi·∫£i th√≠ch
                    </Text>
                    <Text style={{
                        color: '#9CA3AF',
                        marginTop: 10,
                        textAlign: 'center',
                        fontSize: 14
                    }}>
                        Vui l√≤ng th·ª≠ l·∫°i sau
                    </Text>
                </View>
            );
        }

        const sections = explanationType === 'vocabulary' 
            ? formatVocabularyExplanation(explanation)
            : explanationType === 'grammar'
                ? formatGrammarExplanation(explanation)
                : formatQuestionExplanation(explanation);

        return (
            <View>
                {/* Header */}
                <View style={{
                    flexDirection: 'row',
                    alignItems: 'center',
                    marginBottom: 20,
                    padding: 15,
                    backgroundColor: '#FDF2F8',
                    borderRadius: 12,
                    borderLeftWidth: 4,
                    borderLeftColor: '#F472B6'
                }}>
                    <Icon name="sparkles" size={22} color="#F472B6" />
                    <Text style={{
                        fontSize: 20,
                        fontWeight: '600',
                        color: '#1F2937',
                        marginLeft: 10
                    }}>
                        {explanationType === 'vocabulary' ? 'Gi·∫£i th√≠ch t·ª´ v·ª±ng' : explanationType === 'grammar' ? 'Gi·∫£i th√≠ch ng·ªØ ph√°p' : 'Gi·∫£i th√≠ch c√¢u h·ªèi'}
                    </Text>
                </View>
                
                {/* Content Sections */}
                {sections.length > 0 ? sections.map((section, index) => (
                    <View key={index} style={{
                        marginBottom: section.type === 'example' ? 10 : 20,
                        padding: section.type === 'example' ? 12 : 16,
                        backgroundColor: section.type === 'example' ? '#F0F9FF' : 'white',
                        borderRadius: 12,
                        borderWidth: 1,
                        borderColor: section.type === 'example' ? '#3B82F6' : '#E5E7EB',
                        borderLeftWidth: section.type === 'example' ? 4 : 1,
                        borderLeftColor: section.type === 'example' ? '#3B82F6' : '#F472B6',
                        shadowColor: '#000',
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.1,
                        shadowRadius: 4,
                        elevation: 2
                    }}>
                        {section.number && (
                            <View style={{
                                flexDirection: 'row',
                                alignItems: 'center',
                                marginBottom: 12
                            }}>
                                <View style={{
                                    width: 24,
                                    height: 24,
                                    borderRadius: 12,
                                    backgroundColor: section.type === 'example' ? '#3B82F6' : '#F472B6',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    marginRight: 8
                                }}>
                                    <Text style={{
                                        color: 'white',
                                        fontSize: 12,
                                        fontWeight: 'bold'
                                    }}>
                                        {section.number.replace('.', '').trim()}
                                    </Text>
                                </View>
                                <Text style={{
                                    fontSize: 16,
                                    fontWeight: 'bold',
                                    color: section.type === 'example' ? '#1E40AF' : '#F472B6',
                                    flex: 1
                                }}>
                                    {explanationType === 'vocabulary' ? getVocabSectionTitle(section.number) : 
                                     explanationType === 'grammar' ? getGrammarSectionTitle(section.number) : 
                                     getQuestionSectionTitle(section.number, section.title)}
                                </Text>
                            </View>
                        )}
                        <RichText style={{
                            color: section.type === 'example' ? '#1E40AF' : '#374151',
                            lineHeight: 24,
                            fontSize: section.type === 'example' ? 14 : 15,
                            textAlign: 'justify',
                            fontStyle: section.type === 'example' ? 'italic' : 'normal'
                        }}>
                            {section.content.trim()}
                        </RichText>
                    </View>
                )) : (
                    // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c sections, hi·ªÉn th·ªã text th√¥
                    <View style={{
                        padding: 16,
                        backgroundColor: 'white',
                        borderRadius: 12,
                        borderWidth: 1,
                        borderColor: '#E5E7EB',
                        marginBottom: 20
                    }}>
                        <RichText style={{
                            color: '#374151',
                            lineHeight: 24,
                            fontSize: 15,
                            textAlign: 'justify'
                        }}>
                            {explanation}
                        </RichText>
                    </View>
                )}
                
                {/* Footer */}
                <View style={{
                    marginTop: 20,
                    padding: 15,
                    backgroundColor: '#FDF2F8',
                    borderRadius: 12,
                    borderWidth: 1,
                    borderColor: '#F472B6'
                }}>
                    <View style={{
                        flexDirection: 'row',
                        alignItems: 'center'
                    }}>
                        <Icon name="information-circle" size={20} color="#F472B6" />
                        <Text style={{
                            fontSize: 14,
                            color: '#EC4899',
                            marginLeft: 8,
                            fontWeight: '500'
                        }}>
                            Gi·∫£i th√≠ch ƒë∆∞·ª£c t·∫°o b·ªüi AI v√† c√≥ th·ªÉ c·∫ßn x√°c minh th√™m
                        </Text>
                    </View>
                </View>
                
                <View style={{ height: 20 }} />
            </View>
        );
    };

    const getVocabSectionTitle = (number) => {
        const sectionTitles = {
            '1.': 'T·ª´ v·ª±ng v√† nghƒ©a',
            '2.': 'C√°ch ƒë·ªçc', 
            '3.': 'V√≠ d·ª• c√¢u s·ª≠ d·ª•ng',
            '4.': 'T·ª´ li√™n quan',
            '5.': 'L∆∞u √Ω s·ª≠ d·ª•ng'
        };
        return sectionTitles[number] || 'Th√¥ng tin';
    };

    console.log('üé≠ Modal visibility check:', isModalVisible);

    if (isModalVisible) {
        console.log('üì± Rendering AI Explanation Modal');
        return (
            <View style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(0,0,0,0.7)',
                zIndex: 99999,
                elevation: 99999,
                justifyContent: 'center',
                alignItems: 'center',
                padding: 20
            }}>
                {/* Backdrop ƒë·ªÉ ƒë√≥ng modal */}
                <TouchableOpacity 
                    style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }}
                    onPress={() => {
                        console.log('üéØ Backdrop pressed');
                        hideExplanation();
                    }}
                    activeOpacity={1}
                />

                <View style={{
                    width: '100%',
                    height: '90%',
                    maxWidth: 450,
                    backgroundColor: 'white',
                    borderRadius: 16,
                    overflow: 'hidden',
                    shadowColor: '#000',
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.3,
                    shadowRadius: 8,
                    elevation: 10
                }}>
                    {/* Header */}
                    <View style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        padding: 20,
                        backgroundColor: '#F472B6',
                        borderBottomWidth: 1,
                        borderBottomColor: '#E5E7EB'
                    }}>
                        <View style={{ flex: 1, paddingRight: 10 }}>
                            <Text style={{
                                fontSize: 22,
                                fontWeight: 'bold',
                                color: 'white'
                            }}>{getItemTitle()}</Text>
                            {getItemSubtitle() && (
                                <Text style={{
                                    fontSize: 16,
                                    color: 'rgba(255,255,255,0.9)',
                                    marginTop: 4
                                }}>{getItemSubtitle()}</Text>
                            )}
                        </View>
                        <TouchableOpacity 
                            onPress={() => {
                                console.log('‚ùå Close button pressed');
                                hideExplanation();
                            }}
                            style={{
                                padding: 8,
                                borderRadius: 20,
                                backgroundColor: 'rgba(255,255,255,0.2)'
                            }}
                        >
                            <Icon name="close" size={24} color="white" />
                        </TouchableOpacity>
                    </View>

                    {/* Content */}
                    <ScrollView 
                        style={{ flex: 1 }}
                        contentContainerStyle={{ padding: 20 }}
                        showsVerticalScrollIndicator={true}
                        bounces={true}
                    >
                        {renderContent()}
                    </ScrollView>
                </View>
            </View>
        );
    }

    return null;

    // Original Modal Code (commented out for testing)
    /*
    return (
        <Modal
            animationType="fade"
            transparent={true}
            visible={isModalVisible}
            onRequestClose={() => {
                console.log('üö™ Modal onRequestClose called');
                hideExplanation();
            }}
            presentationStyle="overFullScreen"
        >
            <View style={styles.overlay}>
                <View style={styles.backdrop}>
                    <TouchableOpacity 
                        style={styles.backdropTouchable}
                        onPress={() => {
                            console.log('üéØ Backdrop pressed');
                            hideExplanation();
                        }}
                        activeOpacity={1}
                    />
                </View>
                
                <View style={styles.modalContainer}>
                    <View style={styles.header}>
                        <View style={styles.headerContent}>
                            <Text style={styles.title}>{getItemTitle()}</Text>
                            {getItemSubtitle() && (
                                <Text style={styles.subtitle}>{getItemSubtitle()}</Text>
                            )}
                        </View>
                        <TouchableOpacity 
                            onPress={() => {
                                console.log('‚ùå Close button pressed');
                                hideExplanation();
                            }}
                            style={styles.closeButton}
                        >
                            <Icon name="close" size={24} color="#6B7280" />
                        </TouchableOpacity>
                    </View>

                    <ScrollView 
                        style={styles.scrollView}
                        contentContainerStyle={styles.scrollContent}
                        showsVerticalScrollIndicator={true}
                    >
                        {isLoading ? (
                            <View style={styles.loadingContainer}>
                                <ActivityIndicator size="large" color="#F472B6" />
                                <Text style={styles.loadingText}>
                                    AI ƒëang ph√¢n t√≠ch v√† t·∫°o gi·∫£i th√≠ch chi ti·∫øt...
                                </Text>
                            </View>
                        ) : explanation ? (
                            <View>
                                <View style={styles.explanationHeader}>
                                    <Icon name="sparkles" size={22} color="#FF4081" />
                                    <Text style={styles.explanationTitle}>
                                        Gi·∫£i th√≠ch t·ª´ AI
                                    </Text>
                                </View>
                                
                                {formatExplanation(explanation).map((section, index) => (
                                    <View key={index} style={styles.section}>
                                        {section.number && (
                                            <Text style={styles.sectionNumber}>
                                                {section.number.trim()}
                                            </Text>
                                        )}
                                        <Text style={styles.sectionContent}>
                                            {section.content.trim()}
                                        </Text>
                                    </View>
                                ))}
                                
                                <View style={{ height: 20 }} />
                            </View>
                        ) : (
                            <View style={styles.emptyContainer}>
                                <Icon name="help-circle-outline" size={64} color="#9CA3AF" />
                                <Text style={styles.emptyText}>
                                    Ch∆∞a c√≥ gi·∫£i th√≠ch
                                </Text>
                            </View>
                        )}
                    </ScrollView>
                </View>
            </View>
        </Modal>
    );
    */
};

const styles = StyleSheet.create({
    overlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(255,0,0,0.8)',
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
        zIndex: 9999,
        elevation: 9999,
    },
    backdrop: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1,
    },
    backdropTouchable: {
        flex: 1,
    },
    modalContainer: {
        width: '100%',
        maxWidth: 450,
        maxHeight: '90%',
        backgroundColor: 'white',
        borderRadius: 16,
        overflow: 'hidden',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 10,
        zIndex: 2,
        borderWidth: 3,
        borderColor: 'blue',
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        padding: 20,
        borderBottomWidth: 1,
        borderBottomColor: '#E5E7EB',
        backgroundColor: 'white',
    },
    headerContent: {
        flex: 1,
        paddingRight: 10,
    },
    title: {
        fontSize: 22,
        fontWeight: 'bold',
        color: '#1F2937',
    },
    subtitle: {
        fontSize: 16,
        color: '#6B7280',
        marginTop: 6,
    },
    closeButton: {
        padding: 8,
        borderRadius: 20,
        backgroundColor: '#F3F4F6',
    },
    scrollView: {
        maxHeight: screenHeight * 0.6,
    },
    scrollContent: {
        padding: 20,
    },
    loadingContainer: {
        alignItems: 'center',
        paddingVertical: 60,
    },
    loadingText: {
        color: '#6B7280',
        marginTop: 20,
        textAlign: 'center',
        fontSize: 16,
    },
    explanationHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 20,
    },
    explanationTitle: {
        fontSize: 20,
        fontWeight: '600',
        color: '#1F2937',
        marginLeft: 10,
    },
    section: {
        marginBottom: 25,
    },
    sectionNumber: {
        fontSize: 18,
        fontWeight: 'bold',
        color: '#FF4081',
        marginBottom: 10,
    },
    sectionContent: {
        color: '#374151',
        lineHeight: 28,
        fontSize: 16,
        textAlign: 'justify',
    },
    emptyContainer: {
        alignItems: 'center',
        paddingVertical: 60,
    },
    emptyText: {
        color: '#6B7280',
        marginTop: 20,
        textAlign: 'center',
        fontSize: 16,
    },
}); 