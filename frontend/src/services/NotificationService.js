import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';

class NotificationService {
  constructor() {
    // C·∫•u h√¨nh x·ª≠ l√Ω th√¥ng b√°o
    Notifications.setNotificationHandler({
      handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: true,
        shouldSetBadge: true,
      }),
    });

    // X·ª≠ l√Ω th√¥ng b√°o khi nh·∫≠n ƒë∆∞·ª£c trong foreground
    this.foregroundSubscription = Notifications.addNotificationReceivedListener(
      notification => {
        console.log('Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c:', notification);
      }
    );

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c v·ªõi th√¥ng b√°o
    this.responseSubscription = Notifications.addNotificationResponseReceivedListener(
      response => {
        console.log('Ng∆∞·ªùi d√πng t∆∞∆°ng t√°c:', response);
        // Kh√¥ng c·∫ßn g·ªçi scheduleNextDayReminder v√¨ ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng setTimeout
      }
    );
  }

  async initialize() {
    try {
      // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
      const { status } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
        },
      });

      if (status !== 'granted') {
        console.log('Quy·ªÅn th√¥ng b√°o ch∆∞a ƒë∆∞·ª£c c·∫•p!');
        return false;
      }

      // C·∫•u h√¨nh k√™nh th√¥ng b√°o cho Android
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('study-reminders', {
          name: 'Study Reminders',
          importance: Notifications.AndroidImportance.HIGH,
          vibrationPattern: [0, 250, 250, 250],
          lightColor: '#EC4899',
        });
      }

      return true;
    } catch (error) {
      console.error('L·ªói khi kh·ªüi t·∫°o th√¥ng b√°o:', error);
      return false;
    }
  }

  async createStudyReminder(time) {
    try {
      // H·ªßy th√¥ng b√°o c≈© n·∫øu c√≥
      await this.cancelStudyReminder();

      // Parse th·ªùi gian t·ª´ string "HH:mm"
      const [hours, minutes] = time.split(':').map(Number);

      // T√≠nh to√°n th·ªùi gian cho th√¥ng b√°o ti·∫øp theo
      const now = new Date();
      const scheduledTime = new Date(now);
      scheduledTime.setHours(hours, minutes, 0, 0);

      // N·∫øu th·ªùi gian ƒë√£ qua trong ng√†y, ƒë·∫∑t cho ng√†y mai
      if (scheduledTime <= now) {
        scheduledTime.setDate(scheduledTime.getDate() + 1);
      }

      // T√≠nh s·ªë gi√¢y t·ª´ hi·ªán t·∫°i ƒë·∫øn th·ªùi ƒëi·ªÉm th√¥ng b√°o
      const secondsFromNow = Math.floor((scheduledTime.getTime() - now.getTime()) / 1000);

      // T·∫°o th√¥ng b√°o
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: 'ƒê·∫øn gi·ªù h·ªçc r·ªìi! üìö',
          body: 'H√£y d√†nh th·ªùi gian ƒë·ªÉ √¥n t·∫≠p v√† n√¢ng cao tr√¨nh ƒë·ªô ti·∫øng Nh·∫≠t c·ªßa b·∫°n.',
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
          color: '#EC4899',
          data: { time },
        },
        trigger: {
          seconds: secondsFromNow,
          channelId: Platform.OS === 'android' ? 'study-reminders' : undefined,
        },
      });

      // Ki·ªÉm tra th√¥ng b√°o ƒë√£ l√™n l·ªãch
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log('Th√¥ng b√°o ƒë√£ l√™n l·ªãch:', scheduledNotifications);
      console.log('S·∫Ω th√¥ng b√°o l√∫c:', scheduledTime.toLocaleString());
      console.log('S·ªë gi√¢y ch·ªù:', secondsFromNow);

      return notificationId;
    } catch (error) {
      console.error('L·ªói khi t·∫°o th√¥ng b√°o:', error);
      throw error;
    }
  }

  async cancelStudyReminder() {
    await Notifications.cancelAllScheduledNotificationsAsync();
  }

  cleanup() {
    // H·ªßy ƒëƒÉng k√Ω c√°c listeners khi kh√¥ng c·∫ßn thi·∫øt n·ªØa
    if (this.foregroundSubscription) {
      this.foregroundSubscription.remove();
    }
    if (this.responseSubscription) {
      this.responseSubscription.remove();
    }
  }
}

const notificationService = new NotificationService();
export default notificationService; 